#!/bin/bash

# Sets the output path and filename of the generated ipset script.
outpath=/var/www/html
outfile=admin.ipt

# Sets the filename for the host/ip list.
list=/etc/iptadmin.lst

# Sets the path to the script on the client.
scriptpath=/tmp

# (optional) Sets the filename for the IPTables rules/script files on the client.
# This will allow the script to replace the iptables rules with rules that implement ipset.
ip4rules=/etc/iptables/iptables.rules
ip6rules=/etc/iptables/ip6tables.rules

# Sets the address list timeout (in seconds) for the hosts in the host/ip list.
hosttimeout=14400

# List of secure ports (or IANA Service Names), comma-separated.  If firewall rules matching these ports are
# found when the script is run, ipset options will be applied to those rules.
secureports=ssh

# List of NMS Servers, comma-separated.  These hosts will not be deleted/reloaded when the script is run
# but will be checked and the timeout reset when run.  This prevents NMS Server dropouts during script reload.
# Hosts removed from this list will timeout (in seconds) when nmstimeout is reached.
nmsservers=nms.example.com,nms2.example.com
nmstimeout=86400

# Sets up the scheduler for fetching the iptadmin script.  The scripthost should be the path to the script on the host
# server. The scheduler will fetch scripthost/outfile (specified above).  Time is in minutes.
scripthost=https://www.example.com
schedtime=5

# Enable/Disable the Failsafe Script (optional). This removes the ipset option from port 22 after a set timeout,
# should the script fail to fetch/run from the host server. Timeout is reset to failtime every script fetch/run.
failsafe=false
failtime=72h

function ip4address () {
 if [[ $1 =~ ^([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))?$ ]]; then 
 ipv4addr=$1; else ipv4addr=$(dig A +short $1 | grep -v "\.$" | xargs -rn1); fi
}

function ip6address () {
 if [[ $1 =~ ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?$ ]]; then 
 ipv6addr=$1; else ipv6addr=$(dig AAAA +short $1 | grep -v "\.$" | xargs -rn1); fi
}

function nmstimeout () {
 if [ $nmstimeout ]; then printf ' timeout '"$nmstimeout"; else printf ''; fi
}

function hosttimeout () {
 if [ $hosttimeout ]; then printf ' timeout '"$hosttimeout"; else printf ''; fi
}

function iptdate () { printf "$(TZ=EST5EDT date '+%b/%d/%Y')"; }

function ipttime () { printf "$(TZ=EST5EDT date '+%H:%M:%S')"; }

script=$outpath/$outfile

printf '#!/bin/bash
# Generated on '"$(date)"'
ipset -exist create admin hash:net'"$(hosttimeout)"' family inet
ipset -exist create admin6 hash:net'"$(hosttimeout)"' family inet6\n' > $script

if [ $nmsservers ]; then
 for server in $(printf $nmsservers | tr "," " "); do
  ip4address $server
  if [ $ipv4addr ]; then
   printf 'ipset -exist add admin '"$ipv4addr$(nmstimeout)\n" >> $script
  fi
 done
fi

while read hostlist; do
  ip4address $hostlist
  if [ $ipv4addr ]; then
   printf 'ipset -exist add admin '"$ipv4addr$(hosttimeout)\n" >> $script
  fi
done <$list

if [ $ip4rules ]; then
 for port in $(echo $secureports | tr "," " "); do
  printf "sed '/$port/c\-A INPUT -p tcp -m state --state NEW --dport $port -m set --match-set admin src -j ACCEPT' $ip4rules\n" >> $script
 done
fi

if [ $nmsservers ]; then
 for server in $(printf $nmsservers | tr "," " "); do
  ip6address $server
  if [ $ipv6addr ]; then
   printf 'ipset -exist add admin6 '"$ipv6addr$(nmstimeout)\n" >> $script
  fi
 done
fi

while read hostlist; do
  ip6address $hostlist
  if [ $ipv6addr ]; then
   printf 'ipset -exist add admin6 '"$ipv6addr$(hosttimeout)\n" >> $script
  fi
done <$list

if [ $ip6rules ]; then
 for port in $(echo $secureports | tr "," " "); do
  printf "sed -i '/$port/c\-A INPUT -p tcp -m state --state NEW --dport $port -m set --match-set admin6 src -j ACCEPT' $ip6rules\n" >> $script
 done
fi

printf "printf '# IPTables Admin Whitelist Script
PATH=/usr/bin:/bin:/sbin:
*/"$schedtime" * * * * root curl -ks "$scripthost/$outfile" > "$scriptpath/$outfile" && sh "$scriptpath/$outfile"
' | tee /etc/cron.d/iptadmin\n" >> $script

if [ $failsafe == true ]; then
# Unfinished
fi
